1. import flask......flask is module and Flask is class in that module
2. initialize app .....app = Flask(__name__)

3. @app.route('/')
   write logic..



class Student(db.Model): 
    # this class is representation of table in our database
    # instances of this class will correspond to rows in that table
    # attributes of the class will correspond to columns in the table.
    # student is inheriting db.model.....db.model is class provided by SQLALCHEMY ...it provides methods to interact with database
    # class Student(db.model) is a way of defining model of database
    # model - representation or structure that defines how data is organized, stored, and accessed within the database. 
   

if (__name__=='__main__'):
    app.run(debug = True)




-----------------

# @app.route("/appointment", methods=['POST', 'GET'])
# def appointment():
#     if request.method == "POST" :
#         email = request.form.get('email')
#         doctor = request.form.get('doctor')
#         date = request.form.get('date')
#         time = request.form.get('time')
#         user = User.query.filter_by(email=email).first()
        
#         # Creating a new user using SQLAlchemy ORM
#         new_user = Patient(pemail=email, dname=doctor, date=date,time=time)
#         # Adding the user to the database session and committing the changes
#         db.session.add(new_user)
#         db.session.commit()
#         return redirect(url_for('appointments')) # Redirect to '/appointments' after form submission
#     if current_user.is_authenticated:
#         print("Hello")
#         return render_template('appointments.html')
#     else:
#         return render_template('login.html')
# def get_appointments():
#     # Fetch all appointments from the Appointment table
#     return Patient.query.all()


# Route to render the appointment page  

# @app.route('/appointments')
# @login_required
# def appointments():
#     if current_user.is_authenticated:
#         appointments_data = Patient.query.filter_by(pemail=current_user.email).all()
#         return render_template('appointments.html', appointments=appointments_data)
#     else:
#         flash('You need to log in first.', 'info')
#         return redirect(url_for('login'))
